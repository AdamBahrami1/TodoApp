import React, { useEffect, useState } from 'react';
import './App.css';
import './video.css'; // Corrected import path
import { TodoWrapper } from './components/TodoWrapper'; // Update the import path
import { GoogleAuthProvider, signInWithPopup, signOut } from 'firebase/auth';
import { auth } from './firebase';
// Required for side-effects
import "firebase/firestore";
import { getFirestore, collection, addDoc, query, where, getDocs, doc, deleteDoc, setIndexConfiguration } from 'firebase/firestore';

const db = getFirestore();

function App(clientId) {
  const [user, setUser] = useState(null);
  const [todos, setTodos] = useState([]);
  const [idVals, setIdVals] = useState([]); // Store multiple IDs in array and find array id in this list after when deleting
  const [fireId,setFireId] =useState();
  


  useEffect(() => {
    // Set up auth state listener
    const unsubscribe = auth.onAuthStateChanged((user) => {
      setUser(user);

      if (!user) {
        // User is not authenticated (signed out).
        localStorage.removeItem('authenticated');
        
        // Clear todos immediately when the user signs out
        setTodos([]);
      } else {
        // If the user is authenticated, fetch their todos
        getUserTodosFromFirestore();
      }
    });

    // Check if the user was authenticated previously
    const isAuthenticated = localStorage.getItem('authenticated');

    if (!isAuthenticated) {
      signOut(auth).then(() => {
        // Sign-out successful.
        console.log("Signed out due to page refresh or sign-out button click");
      }).catch((error) => {
        // An error happened during sign-out.
        console.error("Error during sign-out:", error);
      });
    }

    // Save authentication status to local storage
    localStorage.setItem('authenticated', user ? 'true' : 'false');

    return () => {
      unsubscribe();
    };
  }, []);

  const handleGoogle = async () => {
    try {
      const provider = new GoogleAuthProvider();
      provider.setCustomParameters({ prompt: 'select_account' });
      await signInWithPopup(auth, provider);
      
      // After successful login, fetch the user's todos
      getUserTodosFromFirestore();
  
      // If the sign-in is successful, you can proceed with any necessary actions.
    } catch (error) {
      // Handle the error here
      alert("Error signing in   ")
      console.error("Error signing in with Google:", error);
      // You can also display an error message to the user if needed.
      // For example: setErrorMessage("Failed to sign in with Google. Please try again.");
    }
  };

  const handleLogout = () => {
    signOut(auth).then(() => {
      // Sign-out successful.
      console.log("Signed out successfully");
      setTodos([]); // Clear todos when the user logs out
    }).catch((error) => {
      // An error happened.
    });
  };

  const addTodoToFirestore = async (todoText,clientsideId) => {
    console.log("Adding todo to Firestore");
    if (user && todoText !== undefined && todoText.trim() !== '') {
      try {
        const todoCollection = collection(db, 'todos');
        // Create a document with an autogenerated id
        const docRef = await addDoc(todoCollection, {
          text: todoText,
          userId: user.uid,
          clientId: clientsideId,
        });

        console.log("text: ",todoText);
        console.log("UserId: ",user.uid);
        console.log("clientId: ",clientsideId);
        // Get the Firestore id from the reference
        
        const id = docRef.id;
        setFireId(id);
        console.log("Firebase ID: ",id);
        setIdVals([...idVals, id]);
        
        // Call getUserTodosFromFirestore to retrieve and display the updated list of todos
        await getUserTodosFromFirestore();
        
      } catch (error) {
        console.error("Error adding todo to Firestore:", error);
      }
    } else {
      console.error("User is not signed in or todoText is undefined or empty.");
    }
  };
  

  // Function to get user-specific todos from Firestore
  const getUserTodosFromFirestore = async () => {
    if (user) { // Check if the user is authenticated
      try {
        const todoRef = collection(db, 'todos');
        const q = query(todoRef, where('userId', '==', user.uid));
        const querySnapshot = await getDocs(q);
        const todosData = querySnapshot.docs.map((doc) => doc.data());
        setTodos(todosData);
      } catch (error) {
        console.error("Error fetching user-specific todos:", error);
      }
    }
    // No need to clear todos here, they will persist across logins
  };

  // Delete a document by its id
  const deleteTodoFirestore = async (clientId) => {
    console.log(`Attempting to delete todo with clientId: ${clientId}`);
    try {
      // Create a reference to the 'todos' collection
      const todoCollection = collection(db, 'todos');
      
      // Query for the document with the matching 'clientId'
      const q = query(todoCollection, where('clientId', '==', clientId));
  
      // Get the query snapshot
      const querySnapshot = await getDocs(q);
  
      // Check if a matching document was found
      if (!querySnapshot.empty) {
        // Delete the document using the reference
        const docRef = doc(db, 'todos', querySnapshot.docs[0].id);
        await deleteDoc(docRef);
        console.log(`Todo with clientId ${clientId} deleted from Firestore.`);
      } else {
        console.warn(`No document found with clientId: ${clientId}`);
      }
      
      // Update client-side state to remove the deleted todo
      setTodos((prevTodos) => prevTodos.filter((todo) => todo.clientId !== clientId));
    } catch (error) {
      console.error('Error deleting todo from Firestore:', error);
    }
  };
  
  
  
  

  return (
    <div className="App">
      <video autoPlay muted loop className="video-background">
        <source src="/videos/ball.mp4" type="video/mp4" /> {/* Adjust the path */}
        Your browser does not support the video tag.
      </video>
      <div className="content">
        <div className='todo-container'>
          <TodoWrapper
            user={user} // Pass the user object as 'user' prop
            addTodoToFirestore={addTodoToFirestore}
            getUserTodosFromFirestore={getUserTodosFromFirestore}
            deleteTodoFirestore={deleteTodoFirestore}
            idVals={idVals}
            fireId={fireId}
          />

          <div className='pt-36 w-full flex'>
            {user ? (
              <button onClick={handleLogout} className='signOutbutton'>
                Sign Out
              </button>
            ) : (
              <button style={{margin:'2px'}} onClick={handleGoogle} className='signInbutton'>
                Sign In With Google
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;
